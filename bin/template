#!/bin/bash
# this script is used to update and/or create new templates for the class environments
# before creating a new template please make sure you have added the appropriate variables class.cfg file

# here we are setting our variables for our course deployment
# action - what are we doing
ACTION=$1
# this is the course that we are working with
COURSE=$2

# we need to to make sure we have the latest version of the class.cfg file in the correct location
FILE=/home/$USER/az_config/class.cfg
if [ -f ${FILE} ];
then
        echo "class.cfg exists"
else
        wget https://github.com/aksoutherland/az_config/raw/master/class.cfg -O /home/$USER/az_config/class.cfg
fi


usage () {
	echo
	echo "USAGE: $0 <action> <course>"
	echo
	echo "When running this script, you need to supply 2 arguments,"
	echo
	echo "The first argument will specify the "Action" you wish to perform"
	echo "     A. Use "update" to update an existing template"
	echo "     B. Use "new" to create a new template"
	echo "     C. Use "publish" to publish the template"
	echo "     D. Use "delete" to delete a template" 
	echo
	echo "The second argument will be the name of the course you are working with"
	echo
	echo "Please re-run the command with the proper arguments"
	echo
	echo "EXAMPLE COMMANDS: template update sle301"
	echo "                  template new sle201"
	echo "                  template publish sle201"
	echo "                  template delete sle201"
	echo 
	echo 
}

if [ -z "${ACTION}" ] 
then
	echo
	echo "You are missing the action command"
	echo "Please specify either appropriate action"
	echo 
	usage
	exit

elif [ -z "${COURSE}" ]
then
	RG=trainingimages
	echo
	echo "You are missing the course"
	echo "Please specify the course code for the course you want to work with"
	echo 
	usage
	exit
fi

# we have 3 working directories set as environment variables
# this location is where we find the scripts to create the azure env
ENV_DIR=/home/$USER/lab_setup/azure-course-tools
# this is where we find the script to create the VM's
VM_DIR=/home/$USER/lab_setup/create-azure-vm
# this is the VM template dir
VM_TMPL_DIR=/home/$USER/az_config

# here we set the region
REGION="centralus"

# template source variables
ENV_TMPL_SOURCE=${VM_TMPL_DIR}/course-environment.cfg.template
VM_TMPL_SOURCE=${VM_TMPL_DIR}/template.azvm
COURSE_TMPL_SOURCE=${VM_TMPL_DIR}/course-environment.cfg.template

# modified template variables
VM_TEMPLATE1=${VM_TMPL_DIR}/${COURSE}/${COURSE}-vm-template.azvm
VM_TEMPLATE2=${VM_TMPL_DIR}/${COURSE}/${COURSE}-student${VM}.azvm
COURSE_TEMPLATE=${VM_TMPL_DIR}/${COURSE}/${COURSE}.cfg

# Here we are remapping some variables so that we don't have to edit the script each time we change to a different course
sub1=VM_DISK_SIZE_${COURSE}
sub2=VM_PASSWD_${COURSE}
sub3=VM_SIZE_${COURSE}

# here we get the resource group name
export RG=$(az group list -o table | grep ${COURSE}-${REGION} | cut -d " " -f1)

# here we set the resource group name to be used for templates
export TMPLRG=$(az group list -o table | sed -n '3 p' | cut -d " " -f1)

# here we get the storage account name
export ACCOUNT=$(az storage account list -o table | sed -n '4 p' | awk '{ print $9 }')

# here we grab the storage account key
export KEY=$(az storage account keys list --account-name ${ACCOUNT} --output table 2> /dev/null | grep "key1" | awk '{ print $4 }')

# here we get the lab station password
export PASSWD=$(grep VM_PASSWD_${COURSE} /home/$USER/az_config/class.cfg | cut -d "=" -f 2 | tr -d \'\")

# now we set the password
export SSHPASS=${PASSWD}

# here we are going to get a list of the IP's of the remote machines
export IP=$(az vm list-ip-addresses -g ${RG} --output table | awk '{print $2}' | egrep -v 'Public|----')

# here we are going to get a list of HOSTNAME's and IP's of the remote machines
export NAME=$(az vm list-ip-addresses -g ${RG} --output table | awk '{print $1,$2}' | egrep -v 'Public|----')

# here we grab just the names without the IP's
export VMNAME=$(az vm list -g ${RG} --query [].[name] --output tsv)

# here we are setting the options for ssh and scp commands used in various scripts
export SCP="sshpass -e scp -o StrictHostKeyChecking=no"
export SSH="sshpass -e ssh -o StrictHostKeyChecking=no"

update_template () { 
	mkdir ${VM_TMPL_DIR}/${COURSE}
		cp ${VM_TMPL_SOURCE} ${VM_TEMPLATE1}
		sed -i "s/REGION=.*/REGION="${REGION}"/g" ${VM_TEMPLATE1}
		sed -i "s/RESOURCE_GROUP=.*/RESOURCE_GROUP="${TMPLRG}"/g" ${VM_TEMPLATE1}
		sed -i "s/STORAGE_ACCOUNT=.*/STORAGE_ACCOUNT="${ACCOUNT}"/g" ${VM_TEMPLATE1}
                sed -i "s/STORAGE_CONTAINER_NAME=.*/STORAGE_CONTAINER_NAME="course-disks"/g" ${VM_TEMPLATE1}
                sed -i "s/SOURCE_STORAGE_CONTAINER_NAME=.*/SOURCE_STORAGE_CONTAINER_NAME="vhds"/g" ${VM_TEMPLATE1}
		sed -i "s/SOURCE_IMAGE_FILE=.*/SOURCE_IMAGE_FILE="${COURSE}-template-disk.vhd"/g" ${VM_TEMPLATE1}
		sed -i "s/VM_NAME=.*/VM_NAME="${COURSE}-template"/g" ${VM_TEMPLATE1}
		sed -i "s/VM_SIZE=.*/VM_SIZE=${!sub3}/g" ${VM_TEMPLATE1}
		sed -i "s/VM_DISK_SIZE=.*/VM_DISK_SIZE=${!sub1}/g" ${VM_TEMPLATE1}
 	bash ${VM_DIR}/create-azure-vm.sh ${VM_TEMPLATE1}
	# here we set the password for the newly created vm
        az vm user update -g ${TMPLRG} --name $COURSE-template --username tux --password 'linux'
        echo
        echo "Your template has been created"
        echo
}

new_template () { 
# NOTE: when using this function be sure to add the appropriate variables to the class.cfg file for the new template you are creating
# NOTE: otherwise this function will fail
	mkdir ${VM_TMPL_DIR}/${COURSE}
		cp ${VM_TMPL_SOURCE} ${VM_TEMPLATE1}
		sed -i "s/REGION=.*/REGION="${REGION}"/g" ${VM_TEMPLATE1}
		sed -i "s/RESOURCE_GROUP=.*/RESOURCE_GROUP="${TMPLRG}"/g" ${VM_TEMPLATE1}
		sed -i "s/STORAGE_ACCOUNT=.*/STORAGE_ACCOUNT="${ACCOUNT}"/g" ${VM_TEMPLATE1}
		sed -i "s/STORAGE_CONTAINER_NAME=.*/STORAGE_CONTAINER_NAME="course-disks"/g" ${VM_TEMPLATE1}
		sed -i "s/SOURCE_STORAGE_CONTAINER_NAME=.*/SOURCE_STORAGE_CONTAINER_NAME="labmachine-images"/g" ${VM_TEMPLATE1}
		sed -i "s/SOURCE_IMAGE_FILE=.*/SOURCE_IMAGE_FILE="vm-template-disk.vhd"/g" ${VM_TEMPLATE1}
		sed -i "s/VM_NAME=.*/VM_NAME="${COURSE}-template"/g" ${VM_TEMPLATE1}
		sed -i "s/VM_SIZE=.*/VM_SIZE="${!sub3}"/g" ${VM_TEMPLATE1}
		sed -i "s/VM_DISK_SIZE=.*/VM_DISK_SIZE="${!sub1}"/g" ${VM_TEMPLATE1}
        bash ${VM_DIR}/create-azure-vm.sh ${VM_TEMPLATE1}
	# here we set the password for the newly created vm
        az vm user update -g ${TMPLRG} --name $COURSE-template --username tux --password 'linux'
        echo
        echo "Your template has been created"
        echo
}

publish_template () {
	# our first step will be to stop the VM
	az vm deallocate -g ${TMPLRG} -n ${COURSE}-template
	# now we need to delete the VM
	az vm delete -g ${TMPLRG} -n ${COURSE}-template -y
	# now we can move the vhd to the correct container
	az storage blob copy start \
	--account-name ${ACCOUNT} \
	--account-key ${KEY} \
	--destination-container vhds \
	--destination-blob ${COURSE}-template-disk.vhd \
	--source-account-name ${ACCOUNT} \
	--source-account-key ${KEY} \
	--source-container course-disks \
	--source-blob ${COURSE}-template-disk.vhd
	# here we are deleting the vhd from the working container so that we do not have duplicates
	az storage blob delete \
	--account-name ${ACCOUNT} \
	--account-key ${KEY} \
	--container-name course-disks \
	--name ${COURSE}-template-disk.vhd
	# now we need to remove the rest of the VM files
        az network nic delete -g ${TMPLRG} --name ${COURSE}-templateVMNic
        az network public-ip delete -g ${TMPLRG} --name ${COURSE}-templatePublicIP
        az network nsg delete -g ${TMPLRG} --name ${COURSE}-templateNSG
	rm -r ${VM_TMPL_DIR}/${COURSE} 2>/dev/null
        echo
        echo "Your template has been published "
        echo
}

delete_template () {
	# our first step will be to stop the VM
        az vm deallocate -g ${TMPLRG} -n ${COURSE}-template
        # now we need to delete the VM
        az vm delete -g ${TMPLRG} -n ${COURSE}-template -y
        # now we delete the vhd for the VM
        az storage blob delete \
        --account-name ${ACCOUNT} \
        --account-key ${KEY} \
        --container-name course-disks \
        --name ${COURSE}-template-disk.vhd
        # now we need to remove the rest of the VM files
        az network nic delete -g ${TMPLRG} --name ${COURSE}-templateVMNic
        az network public-ip delete -g ${TMPLRG} --name ${COURSE}-templatePublicIP
        az network nsg delete -g ${TMPLRG} --name ${COURSE}-templateNSG
	rm -r ${VM_TMPL_DIR}/${COURSE} 2>/dev/null
	echo 
	echo "Your template has been removed"
	echo
}

main () {
	echo
	echo "Action..............: ${ACTION}"
	echo "Course Code.........: ${COURSE}"
	echo "==========================="
	echo
	echo
	
	case ${ACTION} in 
                update)
                        update_template
                ;;
		new)
			new_template
		;;
		publish)
			publish_template
		;;
		delete)
			delete_template
		;;
	esac
}

main
