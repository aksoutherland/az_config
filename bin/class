#!/bin/bash
# this script is used to either create or delete a class lab environment in azure
# we need to make sure we have the latest version of the class.cfg file in the correct location
FILE=/home/$USER/az_config/class.cfg
if [ -f ${FILE} ];
then
	echo "class.cfg exists"
else
	wget https://github.com/aksoutherland/az_config/raw/master/class.cfg -O /home/$USER/az_config/class.cfg
fi

# here we are setting the variables for the course deployment
# action - what are we doing
ACTION=$1
# this is the course that we are working with
COURSE=$2
# this is the number of stations that we will be deploying
SEAT=$3

usage () {
	echo
	echo "USAGE: $0 <action> <course> <seat count>"
	echo
	echo "When running this script, you need to supply 3 arguments,"
	echo
	echo "1. The action, "create" to deploy a class environment, or "delete" to destroy a class environment"
	echo
	echo "2. The name of the course you wish to either create or delete."
	echo
	echo "3. The number of stations you wish to create in your azure env"
	echo
	echo "Please re-run the command with the proper arguments"
	echo
	echo "EXAMPLE COMMANDS: class create kub201 3"
	echo "                  class delete kub201 0"
	echo
}

if [ -z "${ACTION}" ] 
then
	echo
	echo "You are missing you action command"
	echo "Please specify either create or delete as your action"
	echo 
	usage
	exit

elif [ -z "${COURSE}" ]
then
	echo
	echo "You are missing the course"
	echo "Please specify the course code for the course you want to create or delete"
	echo 
	usage
	exit

elif [ -z "${SEAT}" ]
then
	echo
	echo "You are missing the count"
	echo "Please specify the number of stations you wish to create"
	echo "If deleteing a class, set the count to 0"
	echo "Don't forget to create an extra station for demos"
	echo
	usage
	exit

fi

# we have 3 working directories set as environment variables
# this location is where we find the scripts to create the azure env
ENV_DIR=/home/$USER/lab_setup/azure-course-tools
# this is where we find the script to create the VM's
VM_DIR=/home/$USER/lab_setup/create-azure-vm
# this is the VM template dir
VM_TMPL_DIR=/home/$USER/az_config

# here we set the region
REGION="centralus"

# template source variables 
ENV_TMPL_SOURCE=${VM_TMPL_DIR}/course-environment.cfg.template 
VM_TMPL_SOURCE=${VM_TMPL_DIR}/template.azvm 
COURSE_TMPL_SOURCE=${VM_TMPL_DIR}/course-environment.cfg.template 

# modified template variables 
VM_TEMPLATE1=${VM_TMPL_DIR}/${COURSE}/${COURSE}-vm-template.azvm 
VM_TEMPLATE2=${VM_TMPL_DIR}/${COURSE}/${COURSE}-student${VM}.azvm 
COURSE_TEMPLATE=${VM_TMPL_DIR}/${COURSE}/${COURSE}.cfg 

# Here we are remapping some variables so that we don't have to edit the script each time we change to a different course 
sub1=VM_DISK_SIZE_${COURSE} 
sub2=VM_PASSWD_${COURSE} 
sub3=VM_SIZE_${COURSE} 

# here we get the resource group name
export RG=$(az group list -o table | grep ${COURSE}-${REGION} | cut -d " " -f1)

# here we set the resource group name to be used for templates
export TMPLRG=$(az group list -o table | sed -n '3 p' | cut -d " " -f1)

# here we get the storage account name
export ACCOUNT=$(az storage account list -o table | sed -n '4 p' | awk '{ print $9 }')

# here we grab the storage account key
export KEY=$(az storage account keys list --account-name ${ACCOUNT} --output table 2> /dev/null | grep "key1" | awk '{ print $4 }')

# here we get the lab station password
export PASSWD=$(grep VM_PASSWD_${COURSE} /home/$USER/az_config/class.cfg | cut -d "=" -f 2 | tr -d \'\")

# now we set the password
export SSHPASS=${PASSWD}

# here we are going to get a list of the IP's of the remote machines
export IP=$(az vm list-ip-addresses -g ${RG} --output table | awk '{print $2}' | egrep -v 'Public|----')

# here we are going to get a list of HOSTNAME's and IP's of the remote machines
export NAME=$(az vm list-ip-addresses -g ${RG} --output table | awk '{print $1,$2}' | egrep -v 'Public|----')

# here we grab just the names without the IP's
export VMNAME=$(az vm list -g ${RG} --query [].[name] --output tsv)

# here we are setting the options for ssh and scp commands used in various scripts
export SCP="sshpass -e scp -o StrictHostKeyChecking=no"
export SSH="sshpass -e ssh -o StrictHostKeyChecking=no"

create_course () {
	mkdir ${VM_TMPL_DIR}/${COURSE}
		cp ${COURSE_TMPL_SOURCE} ${COURSE_TEMPLATE}
		sed -i "s/REGION_LIST=.*/REGION_LIST=${REGION}/g" ${COURSE_TEMPLATE}
		sed -i "s/COURSE_RESOURCE_GROUP_BASE_NAME=.*/COURSE_RESOURCE_GROUP_BASE_NAME="${COURSE}"/g" ${COURSE_TEMPLATE}
		sed -i "s/COURSE_STORAGE_ACCOUNT_BASE_NAME=.*/COURSE_STORAGE_ACCOUNT_BASE_NAME="${COURSE}"/g" ${COURSE_TEMPLATE}
		sed -i "s/COURSE_STORAGE_CONTAINER_NAME=.*/COURSE_STORAGE_CONTAINER_NAME="course-disks"/g" ${COURSE_TEMPLATE}
		sed -i "s/IMAGE_SOURCE_RESOURCE_GROUP=.*/IMAGE_SOURCE_RESOURCE_GROUP="${RG}"/g" ${COURSE_TEMPLATE}
		sed -i "s/IMAGE_SOURCE_STORAGE_ACCOUNT=.*/IMAGE_SOURCE_STORAGE_ACCOUNT="${ACCOUNT}"/g" ${COURSE_TEMPLATE}
		sed -i "s/IMAGE_SOURCE_CONTAINER_NAME=.*/IMAGE_SOURCE_CONTAINER_NAME="vhds"/g" ${COURSE_TEMPLATE}
		sed -i "s/IMAGE_SOURCE_IMAGE_FILE=.*/IMAGE_SOURCE_IMAGE_FILE="${COURSE}-template-disk.vhd"/g" ${COURSE_TEMPLATE}
	bash ${ENV_DIR}/create-course-env-in-azure.sh ${COURSE_TEMPLATE}
	for VM in $( seq 1 ${SEAT})
	do
		cp ${VM_TMPL_SOURCE} ${VM_TEMPLATE2}
		sed -i "s/REGION=.*/REGION=${REGION}/g" ${VM_TEMPLATE2}
		sed -i "s/RESOURCE_GROUP=.*/RESOURCE_GROUP=${COURSE}-${REGION}/g" ${VM_TEMPLATE2}
		sed -i "s/STORAGE_ACCOUNT=.*/STORAGE_ACCOUNT=${COURSE}${REGION}/g" ${VM_TEMPLATE2}
                sed -i "s/STORAGE_CONTAINER_NAME=.*/STORAGE_CONTAINER_NAME="vhds"/g" ${VM_TEMPLATE2}
                sed -i "s/SOURCE_STORAGE_CONTAINER_NAME=.*/SOURCE_STORAGE_CONTAINER_NAME="course-disks"/g" ${VM_TEMPLATE2}
	   	sed -i "s/SOURCE_IMAGE_FILE=.*/SOURCE_IMAGE_FILE=${COURSE}-template-disk.vhd/g" ${VM_TEMPLATE2}
 	        sed -i "s/VM_NAME=.*/VM_NAME=${COURSE}-student${VM}/g" ${VM_TEMPLATE2}
	        sed -i "s/VM_SIZE=.*/VM_SIZE=${!sub3}/g" ${VM_TEMPLATE2}
		sed -i "s/VM_DISK_SIZE=.*/VM_DISK_SIZE=${!sub1}/g" ${VM_TEMPLATE2}
	bash ${VM_DIR}/create-azure-vm.sh ${VM_TEMPLATE2}
	done
        # there have been issues reported setting the VM password using the template so we use this instead to set the passwords
	for server in ${VMNAME}
	do 
	az vm user update -g ${RG} --name $server --username tux --password ${!sub2}
	done
        # now we want to get a list of all of the IP's for the VM's so that we can share them with the class
	echo 
	${IP}
	echo 
	echo "Your course has been deployed"
	echo
}

delete_course () {
	az group delete -g ${RG}
	rm -r ${VM_TMPL_DIR}/${COURSE} 2>/dev/null
	echo
	echo "Your course has been removed"
	echo
}

main () {
	echo
	echo "Action..............: ${ACTION}"
	echo "Course Code.........: ${COURSE}"
	echo "Station Count.......: ${SEAT}"
	echo "==========================="
	echo
	echo
	
	case ${ACTION} in 
		create)
			create_course
		;;
		delete)
		        delete_course
		;;

	esac
}

main
